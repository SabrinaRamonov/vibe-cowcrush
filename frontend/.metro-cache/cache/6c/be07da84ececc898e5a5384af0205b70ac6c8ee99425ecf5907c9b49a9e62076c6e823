{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"checkForMatches\", {\n    enumerable: true,\n    get: function () {\n      return checkForMatches;\n    }\n  });\n  Object.defineProperty(exports, \"applyGravity\", {\n    enumerable: true,\n    get: function () {\n      return applyGravity;\n    }\n  });\n  Object.defineProperty(exports, \"hasValidMoves\", {\n    enumerable: true,\n    get: function () {\n      return hasValidMoves;\n    }\n  });\n  const BOARD_SIZE = 8;\n  const NUM_COLORS = 5;\n  const checkForMatches = board => {\n    const matches = [];\n    const matchSet = new Set();\n\n    // Check horizontal matches\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE - 2; col++) {\n        const color = board[row][col];\n        if (color === -1) continue;\n        let matchLength = 1;\n        while (col + matchLength < BOARD_SIZE && board[row][col + matchLength] === color) {\n          matchLength++;\n        }\n        if (matchLength >= 3) {\n          for (let i = 0; i < matchLength; i++) {\n            matchSet.add(`${row}-${col + i}`);\n          }\n        }\n      }\n    }\n\n    // Check vertical matches\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      for (let row = 0; row < BOARD_SIZE - 2; row++) {\n        const color = board[row][col];\n        if (color === -1) continue;\n        let matchLength = 1;\n        while (row + matchLength < BOARD_SIZE && board[row + matchLength][col] === color) {\n          matchLength++;\n        }\n        if (matchLength >= 3) {\n          for (let i = 0; i < matchLength; i++) {\n            matchSet.add(`${row + i}-${col}`);\n          }\n        }\n      }\n    }\n\n    // Convert set to array\n    matchSet.forEach(key => {\n      const [row, col] = key.split('-').map(Number);\n      matches.push({\n        row,\n        col\n      });\n    });\n    return matches;\n  };\n  const applyGravity = board => {\n    const newBoard = board.map(row => [...row]);\n\n    // Move existing cows down\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      let emptyRow = BOARD_SIZE - 1;\n      for (let row = BOARD_SIZE - 1; row >= 0; row--) {\n        if (newBoard[row][col] !== -1) {\n          if (row !== emptyRow) {\n            newBoard[emptyRow][col] = newBoard[row][col];\n            newBoard[row][col] = -1;\n          }\n          emptyRow--;\n        }\n      }\n    }\n\n    // Fill empty spaces with new random cows\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (newBoard[row][col] === -1) {\n          newBoard[row][col] = Math.floor(Math.random() * NUM_COLORS);\n        }\n      }\n    }\n    return newBoard;\n  };\n  const hasValidMoves = board => {\n    // Check all possible swaps\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        // Try swapping right\n        if (col < BOARD_SIZE - 1) {\n          const testBoard = board.map(r => [...r]);\n          const temp = testBoard[row][col];\n          testBoard[row][col] = testBoard[row][col + 1];\n          testBoard[row][col + 1] = temp;\n          if (checkForMatches(testBoard).length > 0) {\n            return true;\n          }\n        }\n\n        // Try swapping down\n        if (row < BOARD_SIZE - 1) {\n          const testBoard = board.map(r => [...r]);\n          const temp = testBoard[row][col];\n          testBoard[row][col] = testBoard[row + 1][col];\n          testBoard[row + 1][col] = temp;\n          if (checkForMatches(testBoard).length > 0) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n});","lineCount":131,"map":[[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"enumerable"],[8,14,4,0],[9,4,4,0,"get"],[9,7,4,0],[9,18,4,0,"get"],[9,19,4,0],[10,6,4,0],[10,13,4,0,"checkForMatches"],[10,28,4,0],[11,4,4,0],[12,2,4,0],[13,2,61,0,"Object"],[13,8,61,0],[13,9,61,0,"defineProperty"],[13,23,61,0],[13,24,61,0,"exports"],[13,31,61,0],[14,4,61,0,"enumerable"],[14,14,61,0],[15,4,61,0,"get"],[15,7,61,0],[15,18,61,0,"get"],[15,19,61,0],[16,6,61,0],[16,13,61,0,"applyGravity"],[16,25,61,0],[17,4,61,0],[18,2,61,0],[19,2,91,0,"Object"],[19,8,91,0],[19,9,91,0,"defineProperty"],[19,23,91,0],[19,24,91,0,"exports"],[19,31,91,0],[20,4,91,0,"enumerable"],[20,14,91,0],[21,4,91,0,"get"],[21,7,91,0],[21,18,91,0,"get"],[21,19,91,0],[22,6,91,0],[22,13,91,0,"hasValidMoves"],[22,26,91,0],[23,4,91,0],[24,2,91,0],[25,2,1,0],[25,8,1,6,"BOARD_SIZE"],[25,18,1,16],[25,21,1,19],[25,22,1,20],[26,2,2,0],[26,8,2,6,"NUM_COLORS"],[26,18,2,16],[26,21,2,19],[26,22,2,20],[27,2,4,7],[27,8,4,13,"checkForMatches"],[27,23,4,28],[27,26,4,32,"board"],[27,31,4,49],[27,35,4,86],[28,4,5,2],[28,10,5,8,"matches"],[28,17,5,47],[28,20,5,50],[28,22,5,52],[29,4,6,2],[29,10,6,8,"matchSet"],[29,18,6,16],[29,21,6,19],[29,25,6,23,"Set"],[29,28,6,26],[29,29,6,35],[29,30,6,36],[31,4,8,2],[32,4,9,2],[32,9,9,7],[32,13,9,11,"row"],[32,16,9,14],[32,19,9,17],[32,20,9,18],[32,22,9,20,"row"],[32,25,9,23],[32,28,9,26,"BOARD_SIZE"],[32,38,9,36],[32,40,9,38,"row"],[32,43,9,41],[32,45,9,43],[32,47,9,45],[33,6,10,4],[33,11,10,9],[33,15,10,13,"col"],[33,18,10,16],[33,21,10,19],[33,22,10,20],[33,24,10,22,"col"],[33,27,10,25],[33,30,10,28,"BOARD_SIZE"],[33,40,10,38],[33,43,10,41],[33,44,10,42],[33,46,10,44,"col"],[33,49,10,47],[33,51,10,49],[33,53,10,51],[34,8,11,6],[34,14,11,12,"color"],[34,19,11,17],[34,22,11,20,"board"],[34,27,11,25],[34,28,11,26,"row"],[34,31,11,29],[34,32,11,30],[34,33,11,31,"col"],[34,36,11,34],[34,37,11,35],[35,8,12,6],[35,12,12,10,"color"],[35,17,12,15],[35,22,12,20],[35,23,12,21],[35,24,12,22],[35,26,12,24],[36,8,14,6],[36,12,14,10,"matchLength"],[36,23,14,21],[36,26,14,24],[36,27,14,25],[37,8,15,6],[37,15,16,8,"col"],[37,18,16,11],[37,21,16,14,"matchLength"],[37,32,16,25],[37,35,16,28,"BOARD_SIZE"],[37,45,16,38],[37,49,17,8,"board"],[37,54,17,13],[37,55,17,14,"row"],[37,58,17,17],[37,59,17,18],[37,60,17,19,"col"],[37,63,17,22],[37,66,17,25,"matchLength"],[37,77,17,36],[37,78,17,37],[37,83,17,42,"color"],[37,88,17,47],[37,90,18,8],[38,10,19,8,"matchLength"],[38,21,19,19],[38,23,19,21],[39,8,20,6],[40,8,22,6],[40,12,22,10,"matchLength"],[40,23,22,21],[40,27,22,25],[40,28,22,26],[40,30,22,28],[41,10,23,8],[41,15,23,13],[41,19,23,17,"i"],[41,20,23,18],[41,23,23,21],[41,24,23,22],[41,26,23,24,"i"],[41,27,23,25],[41,30,23,28,"matchLength"],[41,41,23,39],[41,43,23,41,"i"],[41,44,23,42],[41,46,23,44],[41,48,23,46],[42,12,24,10,"matchSet"],[42,20,24,18],[42,21,24,19,"add"],[42,24,24,22],[42,25,24,23],[42,28,24,26,"row"],[42,31,24,29],[42,35,24,33,"col"],[42,38,24,36],[42,41,24,39,"i"],[42,42,24,40],[42,44,24,42],[42,45,24,43],[43,10,25,8],[44,8,26,6],[45,6,27,4],[46,4,28,2],[48,4,30,2],[49,4,31,2],[49,9,31,7],[49,13,31,11,"col"],[49,16,31,14],[49,19,31,17],[49,20,31,18],[49,22,31,20,"col"],[49,25,31,23],[49,28,31,26,"BOARD_SIZE"],[49,38,31,36],[49,40,31,38,"col"],[49,43,31,41],[49,45,31,43],[49,47,31,45],[50,6,32,4],[50,11,32,9],[50,15,32,13,"row"],[50,18,32,16],[50,21,32,19],[50,22,32,20],[50,24,32,22,"row"],[50,27,32,25],[50,30,32,28,"BOARD_SIZE"],[50,40,32,38],[50,43,32,41],[50,44,32,42],[50,46,32,44,"row"],[50,49,32,47],[50,51,32,49],[50,53,32,51],[51,8,33,6],[51,14,33,12,"color"],[51,19,33,17],[51,22,33,20,"board"],[51,27,33,25],[51,28,33,26,"row"],[51,31,33,29],[51,32,33,30],[51,33,33,31,"col"],[51,36,33,34],[51,37,33,35],[52,8,34,6],[52,12,34,10,"color"],[52,17,34,15],[52,22,34,20],[52,23,34,21],[52,24,34,22],[52,26,34,24],[53,8,36,6],[53,12,36,10,"matchLength"],[53,23,36,21],[53,26,36,24],[53,27,36,25],[54,8,37,6],[54,15,38,8,"row"],[54,18,38,11],[54,21,38,14,"matchLength"],[54,32,38,25],[54,35,38,28,"BOARD_SIZE"],[54,45,38,38],[54,49,39,8,"board"],[54,54,39,13],[54,55,39,14,"row"],[54,58,39,17],[54,61,39,20,"matchLength"],[54,72,39,31],[54,73,39,32],[54,74,39,33,"col"],[54,77,39,36],[54,78,39,37],[54,83,39,42,"color"],[54,88,39,47],[54,90,40,8],[55,10,41,8,"matchLength"],[55,21,41,19],[55,23,41,21],[56,8,42,6],[57,8,44,6],[57,12,44,10,"matchLength"],[57,23,44,21],[57,27,44,25],[57,28,44,26],[57,30,44,28],[58,10,45,8],[58,15,45,13],[58,19,45,17,"i"],[58,20,45,18],[58,23,45,21],[58,24,45,22],[58,26,45,24,"i"],[58,27,45,25],[58,30,45,28,"matchLength"],[58,41,45,39],[58,43,45,41,"i"],[58,44,45,42],[58,46,45,44],[58,48,45,46],[59,12,46,10,"matchSet"],[59,20,46,18],[59,21,46,19,"add"],[59,24,46,22],[59,25,46,23],[59,28,46,26,"row"],[59,31,46,29],[59,34,46,32,"i"],[59,35,46,33],[59,39,46,37,"col"],[59,42,46,40],[59,44,46,42],[59,45,46,43],[60,10,47,8],[61,8,48,6],[62,6,49,4],[63,4,50,2],[65,4,52,2],[66,4,53,2,"matchSet"],[66,12,53,10],[66,13,53,11,"forEach"],[66,20,53,18],[66,21,53,20,"key"],[66,24,53,23],[66,28,53,28],[67,6,54,4],[67,12,54,10],[67,13,54,11,"row"],[67,16,54,14],[67,18,54,16,"col"],[67,21,54,19],[67,22,54,20],[67,25,54,23,"key"],[67,28,54,26],[67,29,54,27,"split"],[67,34,54,32],[67,35,54,33],[67,38,54,36],[67,39,54,37],[67,40,54,38,"map"],[67,43,54,41],[67,44,54,42,"Number"],[67,50,54,48],[67,51,54,49],[68,6,55,4,"matches"],[68,13,55,11],[68,14,55,12,"push"],[68,18,55,16],[68,19,55,17],[69,8,55,19,"row"],[69,11,55,22],[70,8,55,24,"col"],[71,6,55,28],[71,7,55,29],[71,8,55,30],[72,4,56,2],[72,5,56,3],[72,6,56,4],[73,4,58,2],[73,11,58,9,"matches"],[73,18,58,16],[74,2,59,0],[74,3,59,1],[75,2,61,7],[75,8,61,13,"applyGravity"],[75,20,61,25],[75,23,61,29,"board"],[75,28,61,46],[75,32,61,63],[76,4,62,2],[76,10,62,8,"newBoard"],[76,18,62,16],[76,21,62,19,"board"],[76,26,62,24],[76,27,62,25,"map"],[76,30,62,28],[76,31,62,30,"row"],[76,34,62,33],[76,38,62,38],[76,39,62,39],[76,42,62,42,"row"],[76,45,62,45],[76,46,62,46],[76,47,62,47],[78,4,64,2],[79,4,65,2],[79,9,65,7],[79,13,65,11,"col"],[79,16,65,14],[79,19,65,17],[79,20,65,18],[79,22,65,20,"col"],[79,25,65,23],[79,28,65,26,"BOARD_SIZE"],[79,38,65,36],[79,40,65,38,"col"],[79,43,65,41],[79,45,65,43],[79,47,65,45],[80,6,66,4],[80,10,66,8,"emptyRow"],[80,18,66,16],[80,21,66,19,"BOARD_SIZE"],[80,31,66,29],[80,34,66,32],[80,35,66,33],[81,6,68,4],[81,11,68,9],[81,15,68,13,"row"],[81,18,68,16],[81,21,68,19,"BOARD_SIZE"],[81,31,68,29],[81,34,68,32],[81,35,68,33],[81,37,68,35,"row"],[81,40,68,38],[81,44,68,42],[81,45,68,43],[81,47,68,45,"row"],[81,50,68,48],[81,52,68,50],[81,54,68,52],[82,8,69,6],[82,12,69,10,"newBoard"],[82,20,69,18],[82,21,69,19,"row"],[82,24,69,22],[82,25,69,23],[82,26,69,24,"col"],[82,29,69,27],[82,30,69,28],[82,35,69,33],[82,36,69,34],[82,37,69,35],[82,39,69,37],[83,10,70,8],[83,14,70,12,"row"],[83,17,70,15],[83,22,70,20,"emptyRow"],[83,30,70,28],[83,32,70,30],[84,12,71,10,"newBoard"],[84,20,71,18],[84,21,71,19,"emptyRow"],[84,29,71,27],[84,30,71,28],[84,31,71,29,"col"],[84,34,71,32],[84,35,71,33],[84,38,71,36,"newBoard"],[84,46,71,44],[84,47,71,45,"row"],[84,50,71,48],[84,51,71,49],[84,52,71,50,"col"],[84,55,71,53],[84,56,71,54],[85,12,72,10,"newBoard"],[85,20,72,18],[85,21,72,19,"row"],[85,24,72,22],[85,25,72,23],[85,26,72,24,"col"],[85,29,72,27],[85,30,72,28],[85,33,72,31],[85,34,72,32],[85,35,72,33],[86,10,73,8],[87,10,74,8,"emptyRow"],[87,18,74,16],[87,20,74,18],[88,8,75,6],[89,6,76,4],[90,4,77,2],[92,4,79,2],[93,4,80,2],[93,9,80,7],[93,13,80,11,"row"],[93,16,80,14],[93,19,80,17],[93,20,80,18],[93,22,80,20,"row"],[93,25,80,23],[93,28,80,26,"BOARD_SIZE"],[93,38,80,36],[93,40,80,38,"row"],[93,43,80,41],[93,45,80,43],[93,47,80,45],[94,6,81,4],[94,11,81,9],[94,15,81,13,"col"],[94,18,81,16],[94,21,81,19],[94,22,81,20],[94,24,81,22,"col"],[94,27,81,25],[94,30,81,28,"BOARD_SIZE"],[94,40,81,38],[94,42,81,40,"col"],[94,45,81,43],[94,47,81,45],[94,49,81,47],[95,8,82,6],[95,12,82,10,"newBoard"],[95,20,82,18],[95,21,82,19,"row"],[95,24,82,22],[95,25,82,23],[95,26,82,24,"col"],[95,29,82,27],[95,30,82,28],[95,35,82,33],[95,36,82,34],[95,37,82,35],[95,39,82,37],[96,10,83,8,"newBoard"],[96,18,83,16],[96,19,83,17,"row"],[96,22,83,20],[96,23,83,21],[96,24,83,22,"col"],[96,27,83,25],[96,28,83,26],[96,31,83,29,"Math"],[96,35,83,33],[96,36,83,34,"floor"],[96,41,83,39],[96,42,83,40,"Math"],[96,46,83,44],[96,47,83,45,"random"],[96,53,83,51],[96,54,83,52],[96,55,83,53],[96,58,83,56,"NUM_COLORS"],[96,68,83,66],[96,69,83,67],[97,8,84,6],[98,6,85,4],[99,4,86,2],[100,4,88,2],[100,11,88,9,"newBoard"],[100,19,88,17],[101,2,89,0],[101,3,89,1],[102,2,91,7],[102,8,91,13,"hasValidMoves"],[102,21,91,26],[102,24,91,30,"board"],[102,29,91,47],[102,33,91,61],[103,4,92,2],[104,4,93,2],[104,9,93,7],[104,13,93,11,"row"],[104,16,93,14],[104,19,93,17],[104,20,93,18],[104,22,93,20,"row"],[104,25,93,23],[104,28,93,26,"BOARD_SIZE"],[104,38,93,36],[104,40,93,38,"row"],[104,43,93,41],[104,45,93,43],[104,47,93,45],[105,6,94,4],[105,11,94,9],[105,15,94,13,"col"],[105,18,94,16],[105,21,94,19],[105,22,94,20],[105,24,94,22,"col"],[105,27,94,25],[105,30,94,28,"BOARD_SIZE"],[105,40,94,38],[105,42,94,40,"col"],[105,45,94,43],[105,47,94,45],[105,49,94,47],[106,8,95,6],[107,8,96,6],[107,12,96,10,"col"],[107,15,96,13],[107,18,96,16,"BOARD_SIZE"],[107,28,96,26],[107,31,96,29],[107,32,96,30],[107,34,96,32],[108,10,97,8],[108,16,97,14,"testBoard"],[108,25,97,23],[108,28,97,26,"board"],[108,33,97,31],[108,34,97,32,"map"],[108,37,97,35],[108,38,97,37,"r"],[108,39,97,38],[108,43,97,43],[108,44,97,44],[108,47,97,47,"r"],[108,48,97,48],[108,49,97,49],[108,50,97,50],[109,10,98,8],[109,16,98,14,"temp"],[109,20,98,18],[109,23,98,21,"testBoard"],[109,32,98,30],[109,33,98,31,"row"],[109,36,98,34],[109,37,98,35],[109,38,98,36,"col"],[109,41,98,39],[109,42,98,40],[110,10,99,8,"testBoard"],[110,19,99,17],[110,20,99,18,"row"],[110,23,99,21],[110,24,99,22],[110,25,99,23,"col"],[110,28,99,26],[110,29,99,27],[110,32,99,30,"testBoard"],[110,41,99,39],[110,42,99,40,"row"],[110,45,99,43],[110,46,99,44],[110,47,99,45,"col"],[110,50,99,48],[110,53,99,51],[110,54,99,52],[110,55,99,53],[111,10,100,8,"testBoard"],[111,19,100,17],[111,20,100,18,"row"],[111,23,100,21],[111,24,100,22],[111,25,100,23,"col"],[111,28,100,26],[111,31,100,29],[111,32,100,30],[111,33,100,31],[111,36,100,34,"temp"],[111,40,100,38],[112,10,102,8],[112,14,102,12,"checkForMatches"],[112,29,102,27],[112,30,102,28,"testBoard"],[112,39,102,37],[112,40,102,38],[112,41,102,39,"length"],[112,47,102,45],[112,50,102,48],[112,51,102,49],[112,53,102,51],[113,12,103,10],[113,19,103,17],[113,23,103,21],[114,10,104,8],[115,8,105,6],[117,8,107,6],[118,8,108,6],[118,12,108,10,"row"],[118,15,108,13],[118,18,108,16,"BOARD_SIZE"],[118,28,108,26],[118,31,108,29],[118,32,108,30],[118,34,108,32],[119,10,109,8],[119,16,109,14,"testBoard"],[119,25,109,23],[119,28,109,26,"board"],[119,33,109,31],[119,34,109,32,"map"],[119,37,109,35],[119,38,109,37,"r"],[119,39,109,38],[119,43,109,43],[119,44,109,44],[119,47,109,47,"r"],[119,48,109,48],[119,49,109,49],[119,50,109,50],[120,10,110,8],[120,16,110,14,"temp"],[120,20,110,18],[120,23,110,21,"testBoard"],[120,32,110,30],[120,33,110,31,"row"],[120,36,110,34],[120,37,110,35],[120,38,110,36,"col"],[120,41,110,39],[120,42,110,40],[121,10,111,8,"testBoard"],[121,19,111,17],[121,20,111,18,"row"],[121,23,111,21],[121,24,111,22],[121,25,111,23,"col"],[121,28,111,26],[121,29,111,27],[121,32,111,30,"testBoard"],[121,41,111,39],[121,42,111,40,"row"],[121,45,111,43],[121,48,111,46],[121,49,111,47],[121,50,111,48],[121,51,111,49,"col"],[121,54,111,52],[121,55,111,53],[122,10,112,8,"testBoard"],[122,19,112,17],[122,20,112,18,"row"],[122,23,112,21],[122,26,112,24],[122,27,112,25],[122,28,112,26],[122,29,112,27,"col"],[122,32,112,30],[122,33,112,31],[122,36,112,34,"temp"],[122,40,112,38],[123,10,114,8],[123,14,114,12,"checkForMatches"],[123,29,114,27],[123,30,114,28,"testBoard"],[123,39,114,37],[123,40,114,38],[123,41,114,39,"length"],[123,47,114,45],[123,50,114,48],[123,51,114,49],[123,53,114,51],[124,12,115,10],[124,19,115,17],[124,23,115,21],[125,10,116,8],[126,8,117,6],[127,6,118,4],[128,4,119,2],[129,4,121,2],[129,11,121,9],[129,16,121,14],[130,2,122,0],[130,3,122,1],[131,0,122,2],[131,3]],"functionMap":{"names":["<global>","checkForMatches","matchSet.forEach$argument_0","applyGravity","board.map$argument_0","hasValidMoves"],"mappings":"AAA;+BCG;mBCiD;GDG;CDG;4BGE;6BCC,iBD;CH2B;6BKE;oCDM,aC;oCDY,aC;CLa"},"hasCjsExports":false},"type":"js/module"}]}